# APPLICATION
spring.application.name=KairosBackend
# DB
spring.datasource.url=jdbc:postgresql://localhost:5432/kairos_db
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.jpa.hibernate.ddl-auto=create
spring.jpa.show-sql=true
# SPRINGDOC
springdoc.swagger-ui.path=/api-docs.html
# CACHE
spring.cache.type=simple
# ACTUATOR
management.info.env.enabled=true
management.endpoints.web.exposure.include=health,info,metrics,beans
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/actuator
info.application.name=Kairos
info.application.description=A Spring Boot + PostgreSQL backend for managing and booking events, supporting Docker deployment.
info.application.author.name=Kairos Team
info.application.author.bio=Software Developers
# CORS (separator: ,)
cors.allowed-origins=http://localhost:4200
# JWT
jwt.secret=${JWT_SECRET_KAIROS}
jwt.expiration=3600000
jwt.refresh.expiration=86400000
# HTTPS
server.port=8443
server.ssl.enabled=true
server.ssl.key-store=classpath:kairos.p12
server.ssl.key-store-password=password
server.ssl.keyStoreType=PKCS12
server.ssl.keyAlias=kairos
server.ssl.key-password=password
# SSL PROTOCOL
server.ssl.protocol=TLS
server.ssl.enabled-protocols=TLSv1.2
# HTTP
server.http.port=8080
# LOCALES: custom properties (see Internationalization class in i18n package)
# note: arrays are stored with elements separated by ,
app.locales.supported=en,it,fr,es,de
app.locales.default=it
# OAUTH2 GOOGLE
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID_KAIROS}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET_KAIROS}
spring.security.oauth2.client.registration.google.redirect-uri={baseUrl}/v1/auth/oauth2/callback/{registrationId}
spring.security.oauth2.client.registration.google.scope=email,profile,openid
# OAUTH2 KEYCLOAK
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:8081/realms/kairos-realm
spring.security.oauth2.client.provider.keycloak.authorization-uri=http://localhost:8081/realms/kairos-realm/protocol/openid-connect/auth
spring.security.oauth2.client.provider.keycloak.token-uri=http://localhost:8081/realms/kairos-realm/protocol/openid-connect/token
spring.security.oauth2.client.provider.keycloak.user-info-uri=http://localhost:8081/realms/kairos-realm/protocol/openid-connect/userinfo
spring.security.oauth2.client.provider.keycloak.jwk-set-uri=http://localhost:8081/realms/kairos-realm/protocol/openid-connect/certs
spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
spring.security.oauth2.client.registration.keycloak.client-id=${KEYCLOAK_CLIENT_ID_KAIROS}
spring.security.oauth2.client.registration.keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET_KAIROS}
spring.security.oauth2.client.registration.keycloak.scope=email,profile,openid,roles
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.redirect-uri={baseUrl}/v1/auth/oauth2/callback/{registrationId}
